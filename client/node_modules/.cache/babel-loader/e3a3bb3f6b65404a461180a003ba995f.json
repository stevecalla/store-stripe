{"ast":null,"code":"import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n  __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 46);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(47);\n    }\n    return definition;\n  });\n  __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 48);\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 49);\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 50);\n  __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 51);\n  var fragmentDef = doc.definitions[0];\n  __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 52);\n  return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n  throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(53);\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n  return defaultValues;\n}","map":{"version":3,"names":["invariant","InvariantError","valueToObjectRepresentation","checkDocument","doc","__DEV__","kind","operations","definitions","filter","d","map","definition","concat","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","operation","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","_a","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","variable"],"sources":["/Users/stevecalla/du_coding/projects/shop-shop-stripe/client/node_modules/@apollo/client/utilities/graphql/getFromAST.js"],"sourcesContent":["import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n    __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 46);\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(47);\n        }\n        return definition;\n    });\n    __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 48);\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 49);\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 50);\n    __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 51);\n    var fragmentDef = doc.definitions[0];\n    __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 52);\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(53);\n}\nexport function getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n//# sourceMappingURL=getFromAST.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}